<%= partial :"partials/header" %>
<body>
<!-- Header -->
<header id="header" class="skel-layers-fixed">
    <%= partial :"partials/menu" %>
</header>

<!-- Main -->
<section id="main" class="container">
    <header>
        <span class="icon major fa-cubes accent5"></span>
        <h2>Distributed Hash Table Part One</h2>
        <p>We begin this series by introducing the theory of a DHT and creating a simple process ring.</p>
    </header>
    <div class="box">
        <span class="image featured"><img src="images/dht/books_cropped.png" alt="" /></span>
        
        <p>In part one we introduce the concept of a distributed hash table and build a simple process ring. In part two we'll simulate a DHT with processes running in the same node. Finally, in part three we'll extend the process DHT to a full-blown, multi-node DHT.</p>

        <p>
            Complete code for this tutorial is available in the <a href="https://github.com/colefichter/process_dht/blob/master/src/ring.erl">GitHub repository</a>.
        </p>

        <h3>What is a Distributed Hash Table?</h3>

        <p>Most developers are familiar with hash tables. Store a value, get a key. Lookup a key, get a value. But what happens if you need to scale this idea to a second computer? How do you implement a hash table across multiple physical machines? Enter the distributed hash table: it has some intriguing characteristics that are impossible with a vanilla hash table:</p>

        <ul>
            <li>Fault Tolerance: using many physical machines, data can be replicated to survive individual failures.</li>
            <li>Massive Scale: with essentially unlimited horizontal scaling (i.e. adding more machines) there aren't many effective bounds on the amount of data that can be stored in a DHT.</li>
            <li>Peer-to-peer Architecture: a DHT has a completely decentralized architecture which prevents bottlenecks and single-point-of-failure.</li>
            <li>Consistent Hashing: unlike a regular hash table, Keys and Values rarely need to be rebalanced.</li>
        </ul>
        
        <p>These properties make DHTs an indespensible tool in modern software systems. They are the reason why BitTorrent can find files without using a centralized server, and how modern non-relational (so called "No SQL") datastores can acheive massive scale.</p>

        <h3>Consistent Hashing and the Keyspace</h3>

        <p>The central idea that allows DHTs to fulfill all of the goals above is consistent hashing within a finite keyspace. Like the humble stack, let's deal with those ideas 'last things first and first things last'.</p>

        <p>As with a regular hash table, the keys in a DHT are fixed length hashes of the value being stored. A common choice for hashing would be a 160-bit SHA-1 hash, and that's what we will be using in this tutorial series. Given that we've chosen a 160-bit key, it follows that the total number of possible keys is 2<sup>160</sup>. So, you can think of the keyspace as the set of all possible keys. All 2<sup>160</sup> of them. It should now be obvious that the keyspace must be finite in size, since we know exactly how many keys it contains. (Note: if you're familiar with linear algebra, the keyspace is somewhat akin to a finite vector space.)</p>

        <p>Since our data is stored across many nodes, one characteristic of a regular hash table that we do not want to borrow is the idea of key rebalancing, and this is where consistent hashing comes into play. When a bucket is added to a regular hash table, <em>every</em> key stored in it must be recomputed, and this means that most of the keys and values also get moved around to different buckets. In a DHT, each physical node (machine) acts like a bucket in a regular hash table, so we <strike>want to</strike> must avoid such a costly rebalancing operation between machines that may be, geographically, very far apart. Fortunately, consistent hashing solves this problem.</p>

        <p>Each node in the system will be given responsibility for a contiguous subset of this keyspace. So, hypothetically, if we had <i>n</i> nodes, each node would be the authoritative location for 2<sup>160</sup>/<i>n</i> keys. And which node is responsible for storing a given key? The first node whose ID value (more on this later) is greater than or equal to the key. Such a node is called the "successor node" of the key.</p>

        <h3>A Simple Example</h3>

        <p>To clarify the point, imagine the following small-scale scenario. Suppose the keys are the integers 0, 1, ..., 7, then the keyspace contains only those 8 possible keys. We can imagine the keyspace as a ring with the keys spaced around it clockwise, starting with 0 at the 12 o'clock position.</p>

        <figure>
            <img src="images/dht/ring.png" />
            <figcaption>Credit: http://www.cs.nyu.edu/courses/fall07/G22.2631-001/Chord.ppt</figcaption>
        </figure>

        <p>As each node joins the network, it chooses a key at random to use as its ID. To locate the successor node responsible for a given key, we begin at the first node (with ID 0, in this case) and move clockwise around the ring until we locate the node whose ID is immediately greater than or equal to the key value. (Of course, we must take care to handle the wrap-around point on the ring when moving past key 7 back to key 0.)</p>

        <p>From the diagram it's easy to understand why rebalancing is so much easier under this scheme. Suppose node 1 leaves the network. To preserve its data key 1 would be moved to node 3, but the keys already stored at nodes 0 and 3 would be unaffected. Likewise, if we added a node with ID 6 then the key 6 would have to be moved from node 0 to node 6, but the keys stored on nodes 1 and 3 would be unaffected. This is far superior to the rebalancing situation in a conventional hash table when virtually all of the keys would be moved between buckets.</p>

        <p>This idea of locating the successor node by comparing node IDs with keys (since both are hashes in the same keyspace) is the central concept to making a working DHT. Virtually all the operations - joining the ring, storing values, finding values, replication, etc - are dependent on being able to locate the successor node to a given key.</p>

        <h3>Implementation Baby Steps</h3>

        <p>Even with all of this theory in hand, building a full-blown distributed hash table is a confusing affair. Rather than diving right in, we're instead going to build up a DHT in three stages, starting with something that seems kind of unrelated: a very simple ring of processes.</p>

        <p>In terms of architecture, this process ring will be essentially a cyclical doubly-linked list. After spawning some processes, we'll link each process with it's neighbours, called <code>Next</code> and <code>Prev</code>, making sure to link the first process and last process together in the same way (much like a dog chasing its own tail).</p>

        <p>When the ring is linked-up and ready to go, we will then pass messages around the ring in either direction (clockwise or anti-clockwise) and use a counter to expire the message after it has been handled by a set number of processes in the ring.</p>

        <p>Let's look at the code, starting with the obvious stuff: spawning the processes.</p>

        <div data-gistit="https://github.com/colefichter/process_dht/blob/master/src/ring.erl?slice=26:32"></div>

        <p>The only argument to the <code>start/1</code> function is the number of processes to create in the ring. A list comprehension is used to spawn the desired number of processes, then we link each process to it's neighbours with the <code>link_all/1</code> and join the ends of the list together with the call <code>link(Last, First)</code>.</p>

        <p>Linking any two adjacent process together is as simple as sending each a message indicating that the other process is a neighbour:</p>

        <div data-gistit="https://github.com/colefichter/process_dht/blob/master/src/ring.erl?slice=46:49"></div>

        <p>And linking all the processes in a list (except for linking the first and last process) simply works through the list two items at a time and calling <code>link/2</code>:</p>

        <div data-gistit="https://github.com/colefichter/process_dht/blob/master/src/ring.erl?slice=40:44"></div>

        <p>At this point we've got a ring of process who can each communicate with its neighbours. The server loop in which each process is waiting is very simple. The patterns that handle setting the neighbour references and stopping the process don't warrant any interest. Instead, let's look at how messages get passed around the ring:</p>

        <div data-gistit="https://github.com/colefichter/process_dht/blob/master/src/ring.erl?slice=55:66"></div>

        <p>When a message has been handled, or 'relayed', at least <code>NumRelays</code> times we print a message indicating the message expiry and discard it. For messages that have not yet expired, the relaying process will select its <code>Next</code> or <code>Prev</code> neighbour depending on the desired <code>Direction</code> then pass the message along to that process (making sure to increment the relay counter).</p>

        <p>We can start a message travelling around the ring by calling <code>send_cw/3</code> and <code>send_anti_cw/3</code>. Here's how it looks in practice:</p>

<pre class="erlag-repl">> c(ring).
> FirstProccess = ring:start(5).
> ring:send_anti_cw("Hi", FirstProccess, 10).
> {relay,anti_clockwise,10,1,"Hi"}
> <0.38.0> Relaying 1 "Hi"
> <0.42.0> Relaying 2 "Hi"
> <0.41.0> Relaying 3 "Hi"
> <0.40.0> Relaying 4 "Hi"
> <0.39.0> Relaying 5 "Hi"
> <0.38.0> Relaying 6 "Hi"
> <0.42.0> Relaying 7 "Hi"
> <0.41.0> Relaying 8 "Hi"
> <0.40.0> Relaying 9 "Hi"
> <0.39.0> Relaying 10 "Hi"
> <0.38.0> Dropping message "Hi" after 10 relays.
</pre>

        <p>This process ring may seem overly simple, but it's a critical step in creating a functioning distributed hash table. In the next tutorial we're going to build a simulated DHT. It will have the <code>store</code> and <code>lookup</code> features of a DHT, but rather than being distributed across physical machines we'll use a process ring similar to this one to simulate a network, with each process acting as a separate DHT node. In the third tutorial we'll take the features from that simulated DHT and package them in a system which can be deployed across multiple Erlang nodes and physical machines to work as a complete distributed hash table.</p>

    </div>
</section>

<%= partial :"partials/footer" %>
